package it.soft.progettoweb.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;

import it.soft.progettoweb.beans.Dipendente;
import it.soft.progettoweb.dao.api.DipendenteDAO;

@Service
public class DipendenteDAOImpl implements DipendenteDAO, RowMapper<Dipendente> {
	
	@Autowired
	@Qualifier("namedParameterJdbcTemplate")
	protected NamedParameterJdbcTemplate jdbc;
	
	private static final String INSERT 					= "INSERT INTO DIPENDENTI (COGNOME,NOME,DATA_ASSUNZIONE) VALUES(:cognome,:nome,:dataAssunzione)";
	private static final String DELETE_BY_PK 			= "DELETE FROM DIPENDENTI WHERE ID=:id";
	private static final String UPDATE_BY_PK 			= "UPDATE DIPENDENTI SET COGNOME=:cognome, NOME=:nome, DATA_ASSUNZIONE=:dataAssunzione WHERE ID=:id";
	private static final String SELECT_ALL 				= "SELECT ID,COGNOME,NOME,DATA_ASSUNZIONE FROM DIPENDENTI";
	private static final String SELECT_BY_PK 			= "SELECT ID,COGNOME,NOME,DATA_ASSUNZIONE FROM DIPENDENTI WHERE ID=:id";
	private static final String SELECT_BY_COGNOME_NOME 	= "SELECT ID,COGNOME,NOME,DATA_ASSUNZIONE FROM DIPENDENTI WHERE COGNOME=:cognome AND NOME=:nome";
	
	@Override
	public void save(Dipendente d) throws Exception {
		
		Map<String, Object> paramMap = new HashMap<String, Object>(); 
		paramMap.put("cognome", 		d.getCognome());
		paramMap.put("nome", 			d.getNome());
		paramMap.put("dataAssunzione",  d.getDataAssunzione());
		
		jdbc.update(INSERT, paramMap);  
	}

	@Override
	public void update(Dipendente d) throws Exception {
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("cognome", 		d.getCognome());
		paramMap.put("nome", 			d.getNome());
		paramMap.put("dataAssunzione",  d.getDataAssunzione());
		paramMap.put("id", 				d.getId());
        
		jdbc.update(UPDATE_BY_PK, paramMap);        
	}

	@Override
	public void deleteByPk(Integer id) throws Exception {
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("id", id);
		
		jdbc.update(DELETE_BY_PK, paramMap);
	}
	
	//queryForObject va in errore se non viene trovato nessun oggetto

	@Override
	public List<Dipendente> findAll() throws Exception {
		return jdbc.query(SELECT_ALL,this);
	}
	
	@Override
	public Dipendente findByPk(Integer id) throws Exception {
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("id", id);
		
		List<Dipendente> dipendenti = jdbc.query(SELECT_BY_PK,paramMap,this);
		
		return dipendenti.size() > 0 ? dipendenti.get(0) : null;
	}
	
	@Override
	public Dipendente findByCognomeNome(String cognome, String nome) throws Exception {
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("cognome", cognome);
		paramMap.put("nome", nome);
		
		List<Dipendente> dipendenti = jdbc.query(SELECT_BY_COGNOME_NOME,paramMap,this);
		
		return dipendenti.size() > 0 ? dipendenti.get(0) : null;
	}
	
	public Dipendente mapRow(ResultSet arg0, int arg1) throws SQLException {
	  Dipendente dip = new Dipendente();
	  dip.setId(arg0.getInt("ID"));
	  dip.setCognome(arg0.getString("COGNOME"));
	  dip.setNome(arg0.getString("NOME"));
	  dip.setDataAssunzione(arg0.getBigDecimal("DATA_ASSUNZIONE"));
	  return dip;
	}	
}
